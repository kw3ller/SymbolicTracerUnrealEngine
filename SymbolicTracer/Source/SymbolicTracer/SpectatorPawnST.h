// Fill out your copyright notice in the Description page of Project Settings.

#pragma once

#include "CoreMinimal.h"
#include "DataStructs.h"
#include "InstructionActorST.h"
#include "EInstructionType.h"
#include "GameFramework/SpectatorPawn.h"
#include "SpectatorPawnST.generated.h"

// TODO: probably need to add delegates to update the hud (like what element was clicked)

// delegate for updating the Hud (updated run and instruction indices and also updated codeFile and codeLine indices)
DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(FIntIndexesUpdated1,
                                             int, GeneralNewInd, // runInd, codeFileInd
                                             int, SpecificNewInd); // instrInd, codeLineInd


// forward declarations
class ASceneActorBase;
class AInstructionActorST;
class ACodeBlockActorST;

/*
 * this is our player
 */
UCLASS()
class SYMBOLICTRACER_API ASpectatorPawnST : public ASpectatorPawn
{
	GENERATED_BODY()


	// ---VARIABLES---

public:
	// this is the main traceStruct that was generated by the ptrace json data
	UPROPERTY()
	FTraceInstr TraceInstrStructure;

	// this is the main traceStruct that was generated by the blk json data
	UPROPERTY()
	FTraceBlk TraceBlkStructure;

	// TODO: delete -> does not get used thus far
	// maps the instructionType from json to the enumInstructionType 
	UPROPERTY(EditDefaultsOnly, BlueprintReadOnly)
	TMap<FString, EInstructionType> InstructionTypeTable = {
		{"Jump", EInstructionType::Jump},
		{"Arith", EInstructionType::Arith},
		{"Store", EInstructionType::Store},
		{"Load", EInstructionType::Load},
	};

	// this is the actor symbolising instructions in the symbolic run -> choose the right one in blueprints
	// TODO: Make that it HAS TO be set
	UPROPERTY(EditDefaultsOnly, BlueprintReadOnly, Category="Spawning")
	TSubclassOf<AInstructionActorST> InstructionActor;

	// this is the actor symbolising instructions in the symbolic run -> choose the right one in blueprints
	// TODO: Make that it HAS TO be set
	UPROPERTY(EditDefaultsOnly, BlueprintReadOnly, Category="Spawning")
	TSubclassOf<AInstructionLineActorST> InstructionLineActor;

	// this is the actor symbolising codeBlocks in the symbolic run -> choose the right one in blueprints
	// TODO: Make that it HAS TO be set
	UPROPERTY(EditDefaultsOnly, BlueprintReadOnly, Category="Spawning")
	TSubclassOf<ACodeBlockActorST> CodeBlockActor;

	// delegate to use when clicked run and or clicked instruction index changes
	UPROPERTY(BlueprintAssignable)
	FIntIndexesUpdated1 OnRunInstrIndexChanged;

	// delegate to use when clicked run and or clicked codeBlock index changes
	UPROPERTY(BlueprintAssignable)
	FIntIndexesUpdated1 OnRunCodeBlockIndexChanged;

	// delegate to use when clicked codeFile or codeLine index changes
	UPROPERTY(BlueprintAssignable)
	FIntIndexesUpdated1 OnCodeFileLineIndexChanged;

protected:
	// for @TraceInstrStructure and @TraceBlkStructure -> updated when clicking on an actor in the scene
	UPROPERTY()
	int ClickedRunIndex = -1;

	// for @TraceInstrStructure -> updated when clicking on an actor in the scene
	UPROPERTY()
	int ClickedInstructionIndex = -1;

	// for @TraceBlkStructure -> updated when clicking on an actor in the scene
	UPROPERTY()
	int ClickedCodeBlockIndex = -1;

	// for @TraceBlkStructure -> updated when loadingCodeFiles or clicking on them in the Hud
	UPROPERTY()
	int ClickedCodeFileIndex = -1;

	// for @TraceBlkStructure -> updated when loadingCodeFiles or clicking on them in the Hud
	UPROPERTY()
	int ClickedCodeLineIndex = -1;

private:
	// ---METHODS---

public:
	// Sets default values for this pawn's properties
	ASpectatorPawnST();

	// Called every frame
	virtual void Tick(float DeltaTime) override;

	// Called to bind functionality to input
	virtual void SetupPlayerInputComponent(class UInputComponent* PlayerInputComponent) override;

	// returns clicked run index
	UFUNCTION(BlueprintPure)
	int GetClickedRunIndex() const;

	// returns clicked instruction index
	UFUNCTION(BlueprintPure)
	int GetClickedInstructionIndex() const;

	// loads the json data into @TraceInstrStructure
	UFUNCTION(BlueprintCallable)
	void LoadTraceInstrData();

	// loads the json data into @TraceBlkStructure
	UFUNCTION(BlueprintCallable)
	void LoadTraceBlkData();

	// loads a code file into @TraceBlkStructure
	UFUNCTION(BlueprintCallable)
	void LoadCodeFiles();

	// loads codeLinesDataEntries List into @TraceBlkStructure (inside each CodeFile)
	UFUNCTION(BlueprintCallable)
	void ComputeCodeFilesLinesDataEntries();

	// compute codeBlockBeginning and codeBlockEnding for all codeLines
	void ComputeBlocksCodeLines();

	// broadcasts the current state (e.g. @ClickedRunIndex, @ClickedInstructionIndex)
	// is pretty much only needed, when Hud in another viewMode (so that the other views get updated information (even when not seen)
	void BroadcastCurrentStats();

	// when clicking on an instructionActor in the scene
	UFUNCTION(BlueprintCallable)
	void ClickInstructionActor(int RunInd, int InstrInd);

	// when clicking on an codeBlockActor in the scene
	UFUNCTION(BlueprintCallable)
	void ClickCodeBlockActor(int RunInd, int CodeBlockInd);

	// when clicking on a codeFile in the Hud
	UFUNCTION(BlueprintCallable)
	void ClickCodeFile(int FileInd);

	// shall spawn instructionActors
	UFUNCTION()
	void SpawnInstrObjects();

	// shall spawn instructionLineActors
	UFUNCTION()
	void SpawnInstrLineObjects();

	// shall spawn codeBlockActors
	UFUNCTION()
	void SpawnBlkObjects();

protected:
	// Called when the game starts or when spawned
	virtual void BeginPlay() override;

private:
};
